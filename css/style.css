@charset "utf-8";

/* 

Motition Graphics for Interaction - Project 1 Toggle Switch

Christopher Blouin

*/

/* Restoring Browsers Defaults (Margin & Padding 0) */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Root Styles to keep the theme of my project consistent. */
:root {
    --toggle-transition: all 0.65s;
    --on-colour: #ff9743;
    --off-colour: #d9e9ff;
    --on-shadow: 0 0 20px 0 rgba(255, 115, 0, 0.75);
    --off-shadow: 0 0 10px 0 rgba(217, 233, 255, 0.3);
    --moon-active: #5fa4ff;
    --sun-active: #fd2600;
}

/* Primary wrapper to center all my child content. */
.container-wrapper {
    /* Display flex and center and slign items to the center. */
    display: flex;
    justify-content: center;
    align-items: center;
    /* Setting the height of the container to take up 100% of the viewport height. */
    height: 100vh;
}

/* Main element styles, setting a background-color, and a transition that will occur from my JavaScript. */
main {
    background-color: #0a0a0a;
    transition: background-color 1s ease;
}

/* Stars class to be added to my main element using JQuery. */
.stars {
    background-image: url("../images/grayscale-stars.svg");
    background-size: cover;
    background-position: center top;
    background-repeat: no-repeat;
}

/* Switch container wrapper styles. */
.wrapper {
    /* Relative positioning so all children can be positioned more accurately. */
    position: relative;
    /* Center the wrapper content to the center with display flex and justify content. */
    display: flex;
    justify-content: center;
    align-items: center;
    transform: translateY(300%);
    /* Making sure the switch contents are clickable regardless of the elements position. */
    z-index: 99;
}

.switch-container {
    position: relative;
    cursor: pointer;
}

.switch-container .inner-switch {
    position: relative;
    /* Width and height of the inner switch container. */
    width: 280px;
    height: 90px;
    /* Background color and rounding the toggle container with border radius. */
    background: #181818;
    border-radius: 5rem;
    /* Transition properties for background-color, box-shadow, and transform */
    transition: 
        background-color 0.3s ease-out,
        box-shadow 0.5s ease-in-out,
        transform 0.3s ease-in-out;
}

/* Change the visual state of the innder switch on hover. */
.switch-container .inner-switch:hover {
    /* Change background color to indicate to users that the toggle switch is clickable. */
    background-color: #0c0c0c;
    /* Adding a box shadow to the toggle on hover. */
    box-shadow: 0 0 15px 0 rgba(207, 237, 255, 0.3);
    /* Subtle downwards movement on switch hover. */
    transform: translateY(0.2rem);
}

/* If the inner switch is toggled into the active state, set a box-shadow of the on-shadow color (orange). */
.switch-container .inner-switch.active {
    box-shadow: var(--on-shadow);
}

/* Inner switch circle styles. */
.switch-container .inner-switch:after {
    /* Positioning aboslute to keep the circle inside the switch container as its relative. */
    position: absolute;
    content: "";
    /* Positioning and Sizing properties. */
    top: 0.475rem;
    left: 0.675rem;
    width: 75px;
    height: 75px;
    /* Inner switch background colors. */
    background: var(--off-colour);
    /* Position the switch button over the container with z-index. */
    z-index: 2;
    /* Create a circle declaring a border radius of 5rem */
    border-radius: 5rem;
    /* Switch transition. */
    transition: var(--toggle-transition);
}

/* The distance the inner circle of the toggle will move left when active. */
.switch-container .inner-switch.active:after {
    left: calc(100% - 84px);
}

/* Switch container SVG styles, for the moon and sun icons. */
.switch-container svg {
    /* Positioning properties. */
    position: absolute;
    /* Top 34% to more closely align the SVGs with the toggle circle. */
    top: 34%;
    /* Stroke color */
    stroke: var(--off-colour);
    /* Initial transform origin. */
    transform-origin: 50% 50%;
    /* Setting up the transition duration from the root styles. */
    transition: var(--toggle-transition);
    z-index: 1;
}

/* Moon Switch SVG styles. */
.switch-container .on {
    /* Height and width properties. */
    width: 80px;
    height: 80px;
    /* Nudging over the moon SVG using left 3% */
    left: 3%;
    transform: translateX(190%) translateY(-30%) scale(0);
}

/* Sun Switch SVG Styles. */
.switch-container .off {
    /* Height and width properties. */
    width: 75px;
    height: 75px;
    /* Positioning the sun SVG using right 3% */
    right: 3%;
    transform: translateX(0) translateY(-30%) scale(1);
}

/* Classes to be toggled based on my JQuery and if the active class is present. These styles control the end position during the active state of the transition. */
.switch-container .on.active {
    transform: translateX(0) translateY(-30%) scale(1);
}

.switch-container .off.active {
    transform: translateX(-190%) translateY(-30%) scale(0);
}

/* Inner switch active styles, when in the on state the switch color and SVG of the sun will turn to orange to signify that the toggle is active. */
.switch-container .inner-switch.active svg {
    stroke: var(--on-colour);
}

.switch-container .inner-switch.active:after {
    background: var(--on-colour);
}

/* Animation container for the large Sun and Moon Graphics  */
.animation-container {
    /* Positioned aboslute, and centered in the viewport. */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 80%;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Moon and Sun Graphic Styles, Combination */
.sun, .moon {
    position: absolute;
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: 1;
}

/* Moon Graphic Styles */
.moon {
    position: relative;
    z-index: 1;
    width: 500px;
    height: 500px;
    transform: rotate(-90deg);
    transition: var(--toggle-transition);
}

/* Sun Graphic Styles */
.sun {
    position: absolute;
    z-index: 1;
    width: 500px;
    height: 500px;
    transition: var(--toggle-transition);
}

/* Media query to reduce the size of the moon and sun graphics when the viewport width is 1200px */
@media screen and (max-width: 1200px){

    .moon, .sun {
        width: 425px;
        height: 425px;
    }

}

/* When the viewport width is 568px, apply the following styles. */
@media screen and (max-width: 568px){

    /* Increase the height of the animation container to center the content when on smaller device widths. */
    .animation-container {
        height: 100%;
    }

    /* Reduce the SVG graphics sizes. */
    .moon, .sun {
        width: 280px;
        height: 280px;
    }

}

/* Moon and sun fade-in animation setup. */
.moon.fade-in {
    animation: moonFadeIn 1s ease forwards;
}

.sun.fade-in {
    animation: sunFadeIn 1s ease forwards;
}

/* Keyframes for the moon and sun fade-in animations. */

@keyframes moonFadeIn {
    0% {
        /* The moon will start slightly off the left and down of the viewport */
        transform: translate(-12vw, 10vh);
        /* Initial opacity of 0 to allow for the fade in at 100% */
        opacity: 0;

    }
    100% {
        /* The moon will appear at its full transparancy while rotating into position. */
        opacity: 1;
        transform: translateY(-5vh) rotate(360deg);
        fill: var(--off-colour); 
    }
}

@keyframes sunFadeIn {
    0% {
        /* The sun will start slightly off the right and down of the viewport. */
        transform: translate(12vw, 10vh);
        /* Initial opacity of 0 for fade in to function over the keyframes. */
        opacity: 0;        
    }
    100% {
        /* At the end of the keyframe, transition into fill transparancy while rotating counter clockwise into position. */
        opacity: 1;
        transform: translateY(-5vh) rotate(-180deg);
        /* Change the stroke color during the keyframe animation. */
        stroke: var(--on-colour);
    }
}